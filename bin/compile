#!/usr/bin/env bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
if [ -n "$BUILDPACK_URL" ]; then 
	ENVIRONMENT="Heroku"
else
	ENVIRONMENT="Vagrant"
fi

echo "-----> Environment: ${ENVIRONMENT}"

if [ -z "$CONFIG_PATH" ]; then
  CONFIG_PATH=server/config
fi

if [ -z "$VENDOR_PATH" ]; then
  VENDOR_PATH=server/vendor
fi

if [ -z "$S3_BUILDS_BUCKET" ]; then
  S3_BUILDS_BUCKET=ponticlaro-heroku
fi

if [ -z "$NGINX_VERSION" ]; then
  NGINX_VERSION=1.4.3
fi

if [ -z "$PHP_VERSION" ]; then
  PHP_VERSION=5.5.3
fi

if [ -z "$COMPOSER_CONFIG_PATH" ]; then
  COMPOSER_CONFIG_PATH=/app/public
fi

# Set several useful vars
APP_BIN_PATH=bin
PHP_ROOT_PATH=$VENDOR_PATH/php-$PHP_VERSION
NGINX_ROOT_PATH=$VENDOR_PATH/nginx-$NGINX_VERSION
COMPOSER_CONFIG_FILE=$COMPOSER_CONFIG_PATH/composer.json

# END CONFIG

NGINX_URL="https://s3.amazonaws.com/${S3_BUILDS_BUCKET}/builds/nginx-${NGINX_VERSION}-heroku.tar.gz"
PHP_URL="https://s3.amazonaws.com/${S3_BUILDS_BUCKET}/builds/php-${PHP_VERSION}-with-fpm-heroku.tar.gz"

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

BUILD_DIR=$1
CACHE_DIR=$2
mkdir -p $BUILD_DIR $CACHE_DIR

cd ${BUILD_DIR}
if [ ! -d ./bin ]; then
	mkdir -p bin
fi

if [ ! -d ./server/vendor ]; then
	mkdir -p server/vendor
fi

# Nginx
cd ${BUILD_DIR}
if [ ! -d $NGINX_ROOT_PATH ]; then
	echo "-----> Installing Nginx v${NGINX_VERSION}"
	mkdir -p $NGINX_ROOT_PATH && cd $NGINX_ROOT_PATH
	curl --silent --location $NGINX_URL | tar xz
fi

# PHP
cd ${BUILD_DIR}
if [ ! -d $PHP_ROOT_PATH ]; then
	echo "-----> Installing PHP v${PHP_VERSION}"
	mkdir -p $PHP_ROOT_PATH && cd $PHP_ROOT_PATH
	curl --silent --location $PHP_URL | tar xz
fi

# Composer
cd ${BUILD_DIR}
if [[ -f $COMPOSER_CONFIG_FILE && ! -f $APP_BIN_PATH/composer ]]; then
	echo "-----> Installing Composer"
	curl --silent https://getcomposer.org/installer | $PHP_ROOT_PATH/bin/php -- --install-dir=bin > /dev/null 2>&1
	cp ./bin/composer.phar ./bin/composer
	rm ./bin/composer.phar

elif [[ -f $COMPOSER_CONFIG_FILE && -f $APP_BIN_PATH/composer ]]; then
	echo "-----> Updating Composer"
	$PHP_ROOT_PATH/bin/php ./bin/composer self-update > /dev/null 2>&1

fi

# setup web script. php-cgi relies on PHP_FCGI_CHILDREN=5 PHP_FCGI_MAX_REQUESTS=1000, set in 'bin/release'
echo "-----> Installing boot script"
cd ${BUILD_DIR}

# Remove existing scripts on development VM
if [[ $ENVIRONMENT = 'Vagrant' ]]; then

	if [ -f bin/setup.sh ]; then
		rm -rf bin/setup.sh
	fi

	if [ -f bin/boot.sh ]; then
		rm -rf bin/boot.sh
	fi

fi

# Move app contents to /app on heroku
if [[ -d $BUILD_DIR/app ]]; then
	cp -Rf $BUILD_DIR/app/* $BUILD_DIR
	rm -Rf $BUILD_DIR/app
fi

# Create symlink for nginx
if [[ -f $BUILD_DIR/$NGINX_ROOT_PATH/sbin/nginx ]]; then

	if [[ -L $BUILD_DIR/bin/nginx ]]; then
		rm $BUILD_DIR/bin/nginx
	fi

	ln -s /app/$NGINX_ROOT_PATH/sbin/nginx $BUILD_DIR/bin/nginx
fi

# Create symlink for php
if [[ -f $BUILD_DIR/$PHP_ROOT_PATH/bin/php ]]; then

	if [[ -L $BUILD_DIR/bin/php ]]; then
		rm $BUILD_DIR/bin/php
	fi

	ln -s /app/$PHP_ROOT_PATH/bin/php $BUILD_DIR/bin/php
fi

# Create symlink for php-fpm
if [[ -f $BUILD_DIR/$PHP_ROOT_PATH/sbin/php-fpm ]]; then
	
	if [[ -L $BUILD_DIR/bin/php-fpm ]]; then
		rm $BUILD_DIR/bin/php-fpm
	fi

	ln -s /app/$PHP_ROOT_PATH/sbin/php-fpm $BUILD_DIR/bin/php-fpm
fi

cd ${BUILD_DIR}

cat >bin/setup.sh <<EOF
#!/usr/bin/env bash

echo "-----> Setting up app"

cp /app/$CONFIG_PATH/php/php.ini /app/$PHP_ROOT_PATH/php.ini

erb -d /app/$CONFIG_PATH/php-fpm/php-fpm.conf.erb > /app/$PHP_ROOT_PATH/etc/php-fpm.conf
erb -d /app/$CONFIG_PATH/nginx/nginx.conf.erb > /app/$NGINX_ROOT_PATH/conf/nginx.conf
erb -d /app/$CONFIG_PATH/nginx/project.conf.erb > /app/$NGINX_ROOT_PATH/conf/project.conf

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
  echo "env[\$var] = \\$\${var}" >> /app/$PHP_ROOT_PATH/etc/php-fpm.conf
done

# Make dirs for logs
mkdir -p /app/server/logs/
mkdir -p /app/server/logs/php-fpm
mkdir -p /app/server/logs/nginx

touch /app/server/logs/nginx/access.log /app/server/logs/nginx/error.log /app/server/logs/php-fpm/php-fpm.log
(tail -f -n 0 /app/server/logs/nginx/*.log &)
EOF

chmod +x bin/setup.sh

cat >bin/boot.sh <<EOF
#!/usr/bin/env bash

/app/bin/setup.sh

if [ $ENVIRONMENT = 'Vagrant'  ]; then #kill any php-fpm instance
	echo "-----> Killing PHP FPM instances"
	killall -9 php-fpm
fi
echo "-----> Booting PHP FPM"
/app/bin/php-fpm -y /app/$PHP_ROOT_PATH/etc/php-fpm.conf -c /app/$PHP_ROOT_PATH/php.ini

if [ $ENVIRONMENT = 'Vagrant'  ]; then #stop nginx
	echo "-----> Stopping nginx"
	/app/bin/nginx -s stop
fi
echo "-----> Booting nginx"
/app/bin/nginx -c /app/$NGINX_ROOT_PATH/conf/nginx.conf
EOF

chmod +x bin/boot.sh

echo "-----> Done with compile"

# clean the cache
rm -rf $CACHE_DIR